.\" Generated by kramdown-man 1.0.1
.\" https://github.com/postmodern/kramdown-man#readme
.TH aia 1 "v0.5.18" AIA "User Manuals"
.SH NAME
.PP
aia \- command\-line interface for an AI assistant
.SH SYNOPSIS
.PP
aia \[lB]options\[rB]* PROMPT\[ru]ID \[lB]CONTEXT\[ru]FILE\[rB]* \[lB]\-\- EXTERNAL\[ru]OPTIONS\[pl]\[rB]
.SH DESCRIPTION
.PP
The aia command\-line tool is an interface for interacting with an AI model backend, providing a simple way to send prompts and receive responses\. The CLI supports various options to customize the interaction, load a configuration file, edit prompts, set debugging levels, and more\.
.SH ARGUMENTS
.TP
\fIPROMPT\[ru]ID\fP
This is a required argument\.
.TP
\fICONTEXT\[ru]FILES\fP
This is an optional argument\.  One or more files can be added to the prompt as context for the backend gen\-AI tool to process\.
.TP
\fIEXTERNAL\[ru]OPTIONS\fP
External options are optional\.  Anything that follow \[lq] \-\- \[lq] will be sent to the backend gen\-AI tool\.  For example \[lq]\-\- \-C \-m gpt4\-128k\[rq] will send the options \[lq]\-C \-m gpt4\-128k\[rq] to the backend gen\-AI tool\.  \fBaia\fR will not validate these external options before sending them to the backend gen\-AI tool\.
.SH OPTIONS
.TP
\fB\-\-chat\fR
begin a chat session with the backend after the initial prompt response;  will set \-\-no\-out\[ru]file so that the backend response comes to STDOUT\.  After the initial prompt is processed, you will be asked to provide a follow up\.  Just enter whatever is appropriate terminating your input with a RETURN\.  The backend will provide a response to you follow up and ask you again if you have another follow up\. This back and forth chatting will continue until you enter a RETURN without any other content \- an empty follow up prompt\.  You may also enter a directive to be processed after which another follow up is requested\.  If you have the \fB\-\-shell\fR and\[sl]or the \fB\-\-erb\fR options set you may use those tools within your follow up to provide dynamic content\.
.TP
\fB\-\-completion\fR \fISHELL\[ru]NAME\fP
.TP
\fB\-\-dump\fR \fIPATH\[sl]TO\[sl]FILE\.ext\fP
Dump the current configuration to a file in the format denoted by the file\[cq]s extension\.  Currently only \.yml, \.yaml and \.toml are acceptable file extensions\.  \fIIf the file exists, it will be over\-written without warning\.\fP
.TP
\fB\-e\fR, \fB\-\-edit\fR
Invokes an editor on the prompt file\.  You can make changes to the prompt file, save it and the newly saved prompt will be processed by the backend\.
.TP
\fB\-\-shell\fR
This option tells \fBaia\fR to replace references to system environment variables in the prompt with the value of the envar\.  envars are like \[Do]HOME and \[Do]\[lC]HOME\[rC] in this example their occurance will be replaced by the value of ENV\[lB]\[oq]HOME\[cq]\[rB]\.  Also the dynamic shell command in the pattern \[Do](shell command) will be executed and its output replaces its pattern\.  It does not matter if your shell uses different patters than BASH since the replacement is being done within a Ruby context\.
.TP
\fB\-\-erb\fR
If dynamic prompt content using \[Do](\.\.\.) wasn\[cq]t enough here is ERB\.  Embedded RUby\.  <%\[eq] ruby code %> within a prompt will have its ruby code executed and the results of that execution will be inserted into the prompt\.  I\[cq]m sure we will find a way to truly misuse this capability\.  Remember, some say that the simple prompt is the best prompt\.
.TP
\fB\-\-iq\fR, \fB\-\-image\[ru]quality\fR \fIVALUE\fP
(Used with backend \[oq]client\[cq] only) See the OpenAI docs for valid values (depends on model) \- default: \[oq]\[cq]
.TP
\fB\-\-is\fR, \fB\-\-image\[ru]size\fR \fIVALUE\fP
(Used with backend \[oq]client\[cq] only) See the OpenAI docs for valid values (depends on model) \- default: \[oq]\[cq]
.TP
\fB\-\-model\fR \fINAME\fP
Name of the LLM model to use \- default is gpt\-4\-1106\-preview
.TP
\fB\-\-render\fR
Render markdown to the terminal using the external tool \[lq]glow\[rq] \- default: false
.TP
\fB\-\-speak\fR
Simple implementation\. Uses the \[lq]say\[rq] command to speak the response\.  Fun with \-\-chat
.TP
\fB\-\-sm\fR, \fB\-\-speech\[ru]model\fR \fIMODEL NAME\fP
Which OpenAI LLM to use for text\-to\-speech (TTS) \- default: tts\-1
.TP
\fB\-\-voice\fR \fIVOICE NAME\fP
Which voice to use when speaking text\.  If its \[lq]siri\[rq] and the platform is a Mac, then the CLI utility \[lq]say\[rq] is used\.  Any other name will be used with OpenAI \- default: alloy
.TP
\fB\-\-terse\fR
Add a clause to the prompt text that instructs the backend to be terse in its response\.
.TP
\fB\-\-tm\fR, \fB\-\-transcription\[ru]model\fR \fIMODEL NAME\fP
Which OpenAI LLM to use for audio\-to\-text \- default: whisper\-1
.TP
\fB\-\-version\fR
Print Version \- default is false
.TP
\fB\-b\fR, \fB\-\-\[lB]no\[rB]\-backend\fR \fILLM TOOL\fP
Specify the backend prompt resolver \- default is mods
.TP
\fB\-c\fR, \fB\-\-config\[ru]file\fR \fIPATH\[ru]TO\[ru]CONFIG\[ru]FILE\fP
Load Config File\. both YAML and TOML formats are supported\.  Also ERB is supported\.  For example \[ti]\[sl]aia\[ru]config\.yml\.erb will be processed through ERB and then through YAML\.  The result will be written out to \[ti]\[sl]aia\[ru]config\.yml so that you can manually verify that you got what you wanted from the ERB processing\.
.TP
\fB\-d\fR, \fB\-\-debug\fR
Turn On Debugging \- default is false
.TP
\fB\-e\fR, \fB\-\-edit\fR
Edit the Prompt File \- default is false
.TP
\fB\-f\fR, \-\-fuzzy\`
Use Fuzzy Matching when searching for a prompt \- default is false
.TP
\fB\-h\fR, \fB\-\-help\fR
Show Usage \- default is false
.TP
\fB\-l\fR, \fB\-\-\[lB]no\[rB]\-log\[ru]file\fR \fIPATH\[ru]TO\[ru]LOG\[ru]FILE\fP
Log FILEPATH \- default is \[Do]HOME\[sl]\.prompts\[sl]prompts\.log
.TP
\fB\-m\fR, \fB\-\-\[lB]no\[rB]\-markdown\fR
Format with Markdown \- default is true
.TP
\fB\-n\fR, \fB\-\-next PROMPT\[ru]ID\fR
Specifies the next prompt ID to be processed using the response for the previous prompt ID\[cq]s processing as a context within which to process the next prompt \- default is an empty string
.TP
\fB\-o\fR, \fB\-\-\[lB]no\[rB]\-out\[ru]file\fR \fIPATH\[ru]TO\[ru]OUTPUT\[ru]FILE\fP
Out FILENAME \- default is \.\[sl]temp\.md
.TP
\fB\-\-pipeline PID1,PID2,PID3\fR
Specifies a pipeline of prompt IDs (PID) in which the respone the first prompt is fed into the second prompt as context whose response is fed into the third as context, etc\.  It is a comma seperated list\.  There is no artificial limit to the number of prompt IDs in the pipeline \- default is an empty list
.TP
\fB\-p\fR, \fB\-\-prompts\[ru]dir\fR \fIPATH\[ru]TO\[ru]DIRECTORY\fP
Directory containing the prompt files \- default is \[ti]\[sl]\.prompts
.TP
\fB\-\-roles\[ru]dir\fR \fIPATH\[ru]TO\[ru]DIRECTORY\fP
Directory containing the personification prompt files \- default is \[ti]\[sl]\.prompts\[sl]roles
.TP
\fB\-r\fR, \fB\-\-role\fR \fIROLE\[ru]ID\fP
A role ID is the same as a prompt ID\.  A \[lq]role\[rq] is a specialized prompt that gets pre\-pended to another prompt\.  It\[cq]s purpose is to configure the LLM into a certain orientation within which to resolve its primary prompt\.
.TP
\fB\-v\fR, \fB\-\-verbose\fR
Be Verbose \- default is false
.TP
\fB\-\-voice\fR
The voice to use when the option \fB\-\-speak\fR is used\.  If you are on a Mac, then setting voice to \[lq]siri\[rq] will use your Mac\[cq]s default siri voice and not access OpenAI \- default is \[lq]alloy\[rq] from OpenAI
.TP
\fB\-\-sm\fR, \fB\-\-speech\[ru]model\fR
The OpenAI speech model to use when converting text into speech \- default is \[lq]tts\-1\[rq]
.SH CONFIGURATION HIERARCHY
.PP
System Environment Variables (envars) that are all uppercase and begin with \[lq]AIA\[ru]\[rq] can be used to over\-ride the default configuration settings\.  For example setting \[lq]export AIA\[ru]PROMPTS\[ru]DIR\[eq]\[ti]\[sl]Documents\[sl]prompts\[rq] will over\-ride the default configuration; however, a config value provided by a command line options will over\-ride an envar setting\.
.PP
Configuration values found in a config file will over\-ride all other values set for a config item\.
.PP
\[rq]\[sl]\[sl]config\[rq] directives found inside a prompt file over\-rides that config item regardless of where the value was set\.
.PP
For example \[lq]\[sl]\[sl]config chat? \[eq] true\[rq] within a prompt will setup the chat back and forth chat session for that specific prompt regardless of the command line options or the envar AIA\[ru]CHAT settings
.SH OpenAI ACCOUNT IS REQUIRED
.PP
Additionally, the program requires an OpenAI access key, which can be specified using one of the following environment variables:
.RS
.IP \(bu 2
\fBOPENAI\[ru]ACCESS\[ru]TOKEN\fR
.IP \(bu 2
\fBOPENAI\[ru]API\[ru]KEY\fR
.RE
.PP
Currently there is not specific standard for name of the OpenAI key\.  Some programs use one name, while others use a different name\.  Both of the envars listed above mean the same thing\.  If you use more than one tool to access OpenAI resources, you may have to set several envars to the same key value\.
.PP
To acquire an OpenAI access key, first create an account on the OpenAI platform, where further documentation is available\.
.SH USAGE NOTES
.PP
\fBaia\fR is designed for flexibility, allowing users to pass prompt ids and context files as arguments\. Some options change the behavior of the output, such as \fB\-\-out\[ru]file\fR for specifying a file or \fB\-\-no\-out\[ru]file\fR for disabling file output in favor of standard output (STDPIT)\.
.PP
The \fB\-\-completion\fR option displays a script that enables prompt ID auto\-completion for bash, zsh, or fish shells\. It\[cq]s crucial to integrate the script into the shell\[cq]s runtime to take effect\.
.PP
The \fB\-\-dump path\[sl]to\[sl]file\.ext\fR option will write the current configuration to a file in the format requested by the file\[cq]s extension\.  The following extensions are supported:  \.yml, \.yaml and \.toml
.SH PROMPT DIRECTIVES
.PP
Within a prompt text file any line that begins with \[lq]\[sl]\[sl]\[rq] is considered a prompt directive\.  There are numerious prompt directives available\.  In the discussion above on the configuration you learned about the \[lq]\[sl]\[sl]config\[rq] directive\.
.PP
Detail discussion on individual prompt directives is TBD\.  Most likely it will be handled in the github wiki
.UR https:\[sl]\[sl]github\.com\[sl]MadBomber\[sl]aia
.UE
\.
.PP
Some directives are:
.RS
.IP \(bu 2
\[sl]\[sl]config item value
.IP \(bu 2
\[sl]\[sl]include path\[ru]to\[ru]file
.IP \(bu 2
\[sl]\[sl]ruby ruby\[ru]code
.IP \(bu 2
\[sl]\[sl]shell shell\[ru]command
.RE
.SH Prompt Sequences
.PP
The \fB\-\-next\fR and \fB\-\-pipeline\fR command line options allow for the sequencing of prompts such that the first prompt\[cq]s response feeds into the second prompt\[cq]s context and so on\.  Suppose you had a complex sequence of prompts with IDs one, two, three and four\.  You would use the following \fBaia\fR command to process them in sequence:
.PP
\fBaia one \-\-pipeline two,three,four\fR
.PP
Notice that the value for the pipelined prompt IDs has no spaces\.  This is so that the command line parser does not mistake one of the promp IDs as a CLI option and issue an error\.
.SS Prompt Sequences Inside of a Prompt File
.PP
You can also use the \fBconfig\fR directive inside of a prompt file to specify a sequence\.  Given the example above of 4 prompt IDs you could add this directive to the prompt file \fBone\.txt\fR
.PP
\fB\[sl]\[sl]config next two\fR
.PP
Then inside the prompt file \fBtwo\.txt\fR you could use this directive:
.PP
\fB\[sl]\[sl]config pipeline three,four\fR
.PP
or just
.PP
\fB\[sl]\[sl]config next three\fR
.PP
if you want to specify them one at a time\.
.PP
You can also use the shortcuts \fB\[sl]\[sl]next\fR and \fB\[sl]\[sl]pipeline\fR
.PP
.PP
.RS 4
.EX
\[sl]\[sl]next two
\[sl]\[sl]next three
\[sl]\[sl]next four
\[sl]\[sl]next five
.EE
.RE
.PP
Is the same thing as
.PP
.PP
.RS 4
.EX
\[sl]\[sl]pipeline two,three,four
\[sl]\[sl]next five
.EE
.RE
.SH SEE ALSO
.RS
.IP \(bu 2
OpenAI Platform Documentation
.UR https:\[sl]\[sl]platform\.openai\.com\[sl]docs\[sl]overview
.UE
 for more information on obtaining access tokens
.UR https:\[sl]\[sl]platform\.openai\.com\[sl]account\[sl]api\-keys
.UE
 and working with OpenAI models\.
.IP \(bu 2
llm
.UR https:\[sl]\[sl]llm\.datasette\.io\[sl]
.UE
 for more information on \fBllm\fR \- A CLI utility and Python library for interacting with Large Language Models, both via remote APIs and models that can be installed and run on your own machine\.
.IP \(bu 2
mods
.UR https:\[sl]\[sl]github\.com\[sl]charmbracelet\[sl]mods
.UE
 for more information on \fBmods\fR \- AI for the command line, built for pipelines\.  LLM based AI is really good at interpreting the output of commands and returning the results in CLI friendly text formats like Markdown\. Mods is a simple tool that makes it super easy to use AI on the command line and in your pipelines\. Mods works with OpenAI
.UR https:\[sl]\[sl]platform\.openai\.com\[sl]account\[sl]api\-keys
.UE
 and LocalAI
.UR https:\[sl]\[sl]github\.com\[sl]go\-skynet\[sl]LocalAI
.UE
.IP \(bu 2
sgpt
.UR https:\[sl]\[sl]github\.com\[sl]tbckr\[sl]sgpt
.UE
 (aka shell\-gpt) is a powerful command\-line interface (CLI) tool designed for seamless interaction with OpenAI models directly from your terminal\. Effortlessly run queries, generate shell commands or code, create images from text, and more, using simple commands\. Streamline your workflow and enhance productivity with this powerful and user\-friendly CLI tool\.
.IP \(bu 2
fzf
.UR https:\[sl]\[sl]github\.com\[sl]junegunn\[sl]fzf
.UE
 fzf is a general\-purpose command\-line fuzzy finder\.  It\[cq]s an interactive Unix filter for command\-line that can be used with any list; files, command history, processes, hostnames, bookmarks, git commits, etc\.
.IP \(bu 2
ripgrep
.UR https:\[sl]\[sl]github\.com\[sl]BurntSushi\[sl]ripgrep
.UE
 Search tool like grep and The Silver Searcher\. It is a line\-oriented search tool that recursively searches a directory tree for a regex pattern\. By default, ripgrep will respect gitignore rules and automatically skip hidden files\[sl]directories and binary files\. (To disable all automatic filtering by default, use rg \-uuu\.) ripgrep has first class support on Windows, macOS and Linux, with binary downloads available for every release\.
.IP \(bu 2
glow
.UR https:\[sl]\[sl]github\.com\[sl]charmbracelet\[sl]glow
.UE
 Render markdown on the CLI
.RE
.SH Image Generation
.PP
The \-\-backend \[lq]client\[rq] is the only back end that supports image generation using the \fBdall\-e\-2\fR and \fBdall\-e\-3\fR models through OpenAI\.  The result of your prompt will be a URL that points to the OpenAI storage space where your image is placed\.
.PP
Use \-\-image\[ru]size and \-\-image\[ru]quality to specified the desired size and quality of the generated image\.  The valid values are available at the OpenAI website\.
.PP
https:\[sl]\[sl]platform\.openai\.com\[sl]docs\[sl]guides\[sl]images\[sl]usage?context\[eq]node
.SH AUTHOR
.PP
Dewayne VanHoozer 
.MT dvanhoozer\[at]gmail\.com
.ME
